plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'checkstyle'
}

group = 'ru.esphere.school'
version = '0.0.1-SNAPSHOT'

def defaultEncoding = "UTF-8"
System.setProperty("file.encoding", defaultEncoding)
tasks.withType(JavaCompile) { options.encoding = defaultEncoding }

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "io.springfox:springfox-swagger2:2.8.0"
    implementation "io.springfox:springfox-swagger-ui:2.8.0"
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor project(':tools')
    implementation 'org.testcontainers:testcontainers:1.14.3'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

sourceSets {
    main.java.srcDirs += "src/main/java"
    test.java.srcDirs += "src/test/java"
}

checkstyle {

    checkstyleMain {
        maxWarnings = 0
        ignoreFailures = false

        exclude 'ru/esphere/school/*Application.java'
        exclude 'ru/esphere/school/config/**'
    }

    checkstyleTest {
        ignoreFailures = false
        showViolations = false
    }
}

test {
    useJUnitPlatform()
}
